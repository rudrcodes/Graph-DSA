# Kahn's Algorithm 
- Kahnâ€™s algorithm for Topological Sorting (This is the BFS way to do Topo sort).

## TC: simple BFS -> O(V + E)
 #### Initial step -> put all nodes with indegree 0 into the queue.

## Code:
class Solution
{
    // private:
    // void bfs(int node,int vis[],vector<itn> &ans,queue<int> &q){
    //     // q.push(node);
        
        
    // }
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	   // Using BFS - Kahn Algorithm
	   //Queue will store the nodes which have indegree 0
	   
	   int indegree[V]={0};
	   
	   for(int i=0;i<V;i++){
	       for(auto it:adj[i]){
	           indegree[it]++;
	       }
	   }
	   
	     queue<int> q;
	   for(int i=0;i<V;i++){
	       if(indegree[i]==0){
	           q.push(i);
	       }
	   }

	   vector<int> ans;
	   while(!q.empty()){
	       int node=q.front();
	       ans.push_back(node);
	       q.pop();
	       
	       for(auto it:adj[node]){
	           indegree[it]--;
	           //When the indegree becomes 0 ,this means no more edges are going to be pointed at that node and hence we can now put that in the ans vector (ordering) 
	           if(indegree[it]==0){
	               //push that in q
	               q.push(it);
	           }
	       }
	   }
	    return ans;
	    
	}
};
