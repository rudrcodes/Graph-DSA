// User function Template for C++

class Solution {
    // TC : O(n*m*log(n*m)) + O(n*m*4)
    //For 'for Loop' : n*m*log(set-length) => n*m*log(n*m)
    //For 'DFS'  : n*m*4
    private:
    void DFS(int i,int j,int bi,int bj, vector<pair<int,int>>&path,vector<vector<int>> &vis,vector<vector<int>>&grid){

        int r=grid.size();
        int c=grid[0].size();
        vis[i][j]=1;
        //bi = index i of base cell
        //bj = index j of base cell
        
        //go in 4 directions from the given cell
        int delrow[]={-1,0,1,0};
        int delcol[]={0,1,0,-1};
        
        for(int k=0;k<4;k++){
            int nr=i+delrow[k];
            int nc=j+delcol[k];
            
            if(nr>=0 && nc>=0 && nr<r && nc<c && grid[nr][nc]==1 && vis[nr][nc]==0){
                path.push_back({nr-bi,nc-bj});
                DFS(nr,nc,bi,bj,path,vis,grid);
            }
        }
        
        
        return ;
    }
    
  public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        // To keep unique islands we will use set data structure
        int ans=0;
        // Find the number of islands and push them into set ds, the set ds will store only unique islands
        set<vector<pair<int,int>>> st;
        
        int r=grid.size();
        int c=grid[0].size();
        
        vector<vector<int>> vis(r,vector<int> (c,0));
        
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                //start DFS from the unvisited cell having value 1
                
                if(vis[i][j]==0 && grid[i][j]==1){
                    vis[i][j]=1;
                    vector<pair<int,int>>path;
                    DFS(i,j,i,j,path,vis,grid);
                    
                    st.insert(path);
                }
            }
        }
        
        
        
        
        return st.size();
    }
};
